// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/logqlmodel/analyze/context.proto

package analyze

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RemoteContext struct {
	CountIn     int64            `protobuf:"varint,1,opt,name=countIn,proto3" json:"countIn"`
	CountOut    int64            `protobuf:"varint,2,opt,name=countOut,proto3" json:"countOut"`
	Duration    int64            `protobuf:"varint,3,opt,name=duration,proto3" json:"duration"`
	Name        string           `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	Description string           `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
	Index       int32            `protobuf:"varint,6,opt,name=index,proto3" json:"index"`
	Children    []*RemoteContext `protobuf:"bytes,7,rep,name=children,proto3" json:"children"`
}

func (m *RemoteContext) Reset()      { *m = RemoteContext{} }
func (*RemoteContext) ProtoMessage() {}
func (*RemoteContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_0eeb2e823ade6841, []int{0}
}
func (m *RemoteContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteContext.Merge(m, src)
}
func (m *RemoteContext) XXX_Size() int {
	return m.Size()
}
func (m *RemoteContext) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteContext.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteContext proto.InternalMessageInfo

func (m *RemoteContext) GetCountIn() int64 {
	if m != nil {
		return m.CountIn
	}
	return 0
}

func (m *RemoteContext) GetCountOut() int64 {
	if m != nil {
		return m.CountOut
	}
	return 0
}

func (m *RemoteContext) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *RemoteContext) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RemoteContext) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RemoteContext) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RemoteContext) GetChildren() []*RemoteContext {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto.RegisterType((*RemoteContext)(nil), "analyze.RemoteContext")
}

func init() {
	proto.RegisterFile("pkg/logqlmodel/analyze/context.proto", fileDescriptor_0eeb2e823ade6841)
}

var fileDescriptor_0eeb2e823ade6841 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0x87, 0xe3, 0xfe, 0xaf, 0x7b, 0xaf, 0xae, 0x14, 0x5d, 0xa1, 0x08, 0x21, 0x27, 0x42, 0x20,
	0x65, 0x8a, 0x05, 0xbc, 0x00, 0x0a, 0x13, 0x13, 0x92, 0x47, 0x36, 0x37, 0x31, 0x69, 0xd4, 0xc4,
	0x2e, 0xc1, 0x91, 0x0a, 0x13, 0x8f, 0xc0, 0x63, 0xf0, 0x14, 0xcc, 0x8c, 0x1d, 0x3b, 0x45, 0xd4,
	0x5d, 0x50, 0xa6, 0x3e, 0x02, 0xaa, 0x93, 0x86, 0x22, 0xb1, 0xd8, 0xdf, 0xf9, 0xfc, 0xb3, 0x25,
	0x9f, 0x03, 0x4f, 0x66, 0xd3, 0x08, 0x27, 0x22, 0xba, 0x4f, 0x52, 0x11, 0xb2, 0x04, 0x53, 0x4e,
	0x93, 0xc7, 0x27, 0x86, 0x03, 0xc1, 0x25, 0x9b, 0x4b, 0x6f, 0x96, 0x09, 0x29, 0xcc, 0x7e, 0xad,
	0x0f, 0xff, 0x47, 0x22, 0x12, 0xda, 0xe1, 0x2d, 0x55, 0xc7, 0xc7, 0x6f, 0x2d, 0xf8, 0x97, 0xb0,
	0x54, 0x48, 0x76, 0x55, 0x5d, 0x33, 0x4f, 0x61, 0x3f, 0x10, 0x39, 0x97, 0xd7, 0xdc, 0x02, 0x0e,
	0x70, 0xdb, 0xfe, 0xa8, 0x2c, 0xec, 0x9d, 0x22, 0x3b, 0x30, 0x5d, 0x38, 0xd0, 0x78, 0x93, 0x4b,
	0xab, 0xa5, 0x73, 0x7f, 0xca, 0xc2, 0x6e, 0x1c, 0x69, 0x68, 0x9b, 0x0c, 0xf3, 0x8c, 0xca, 0x58,
	0x70, 0xab, 0xfd, 0x9d, 0xdc, 0x39, 0xd2, 0x90, 0x79, 0x04, 0x3b, 0x9c, 0xa6, 0xcc, 0xea, 0x38,
	0xc0, 0x1d, 0xfa, 0x83, 0xb2, 0xb0, 0x75, 0x4d, 0xf4, 0x6a, 0x9e, 0xc1, 0x51, 0xc8, 0x1e, 0x82,
	0x2c, 0x9e, 0xe9, 0xa7, 0xba, 0x3a, 0xf4, 0xaf, 0x2c, 0xec, 0x7d, 0x4d, 0xf6, 0x0b, 0xd3, 0x86,
	0xdd, 0x98, 0x87, 0x6c, 0x6e, 0xf5, 0x1c, 0xe0, 0x76, 0xfd, 0x61, 0x59, 0xd8, 0x95, 0x20, 0xd5,
	0x66, 0x5e, 0xc2, 0x41, 0x30, 0x89, 0x93, 0x30, 0x63, 0xdc, 0xea, 0x3b, 0x6d, 0x77, 0x74, 0x7e,
	0xe0, 0xd5, 0x0d, 0xf3, 0x7e, 0xb4, 0xa5, 0xfe, 0x5d, 0x9d, 0x25, 0x0d, 0xf9, 0xe1, 0x62, 0x85,
	0x8c, 0xe5, 0x0a, 0x19, 0x9b, 0x15, 0x02, 0xcf, 0x0a, 0x81, 0x57, 0x85, 0xc0, 0xbb, 0x42, 0x60,
	0xa1, 0x10, 0xf8, 0x50, 0x08, 0x7c, 0x2a, 0x64, 0x6c, 0x14, 0x02, 0x2f, 0x6b, 0x64, 0x2c, 0xd6,
	0xc8, 0x58, 0xae, 0x91, 0x71, 0xeb, 0x45, 0xb1, 0x9c, 0xe4, 0x63, 0x2f, 0x10, 0x29, 0x8e, 0x32,
	0x7a, 0x47, 0x39, 0xc5, 0x89, 0x98, 0xc6, 0xf8, 0xf7, 0x99, 0x8e, 0x7b, 0x7a, 0x5a, 0x17, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x60, 0x8a, 0x6d, 0x75, 0xf4, 0x01, 0x00, 0x00,
}

func (this *RemoteContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoteContext)
	if !ok {
		that2, ok := that.(RemoteContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CountIn != that1.CountIn {
		return false
	}
	if this.CountOut != that1.CountOut {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if len(this.Children) != len(that1.Children) {
		return false
	}
	for i := range this.Children {
		if !this.Children[i].Equal(that1.Children[i]) {
			return false
		}
	}
	return true
}
func (this *RemoteContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&analyze.RemoteContext{")
	s = append(s, "CountIn: "+fmt.Sprintf("%#v", this.CountIn)+",\n")
	s = append(s, "CountOut: "+fmt.Sprintf("%#v", this.CountOut)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	if this.Children != nil {
		s = append(s, "Children: "+fmt.Sprintf("%#v", this.Children)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringContext(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RemoteContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoteContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Children) > 0 {
		for iNdEx := len(m.Children) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Children[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContext(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Index != 0 {
		i = encodeVarintContext(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintContext(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintContext(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Duration != 0 {
		i = encodeVarintContext(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.CountOut != 0 {
		i = encodeVarintContext(dAtA, i, uint64(m.CountOut))
		i--
		dAtA[i] = 0x10
	}
	if m.CountIn != 0 {
		i = encodeVarintContext(dAtA, i, uint64(m.CountIn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintContext(dAtA []byte, offset int, v uint64) int {
	offset -= sovContext(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RemoteContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountIn != 0 {
		n += 1 + sovContext(uint64(m.CountIn))
	}
	if m.CountOut != 0 {
		n += 1 + sovContext(uint64(m.CountOut))
	}
	if m.Duration != 0 {
		n += 1 + sovContext(uint64(m.Duration))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovContext(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovContext(uint64(m.Index))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovContext(uint64(l))
		}
	}
	return n
}

func sovContext(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContext(x uint64) (n int) {
	return sovContext(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RemoteContext) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChildren := "[]*RemoteContext{"
	for _, f := range this.Children {
		repeatedStringForChildren += strings.Replace(f.String(), "RemoteContext", "RemoteContext", 1) + ","
	}
	repeatedStringForChildren += "}"
	s := strings.Join([]string{`&RemoteContext{`,
		`CountIn:` + fmt.Sprintf("%v", this.CountIn) + `,`,
		`CountOut:` + fmt.Sprintf("%v", this.CountOut) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Children:` + repeatedStringForChildren + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringContext(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RemoteContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountIn", wireType)
			}
			m.CountIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountIn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountOut", wireType)
			}
			m.CountOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContext
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContext
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContext
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContext
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &RemoteContext{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContext(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContext
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContext
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthContext
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContext
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContext(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthContext
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContext = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContext   = fmt.Errorf("proto: integer overflow")
)
